{"version":3,"file":"static/js/995.981194fe.chunk.js","mappings":"8TAoIA,EApGkB,WAChB,IAAMA,GAAWC,EAAAA,EAAAA,MACjB,GAAuBC,EAAAA,EAAAA,MAAhBC,GAAP,eAEMC,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IAExBC,EAAQJ,EAAaK,IAAI,SAE3BD,GACFP,GAASS,EAAAA,EAAAA,IAAgB,CAAEF,MAAAA,KAG7B,IAAMG,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CC,MAAOF,EAAAA,KAEJG,QAAQC,EAAAA,GAAa,iBACrBC,SAAS,4BACZC,SAAUN,EAAAA,KAAaK,SAAb,iCAWZ,OACE,iCACE,SAAC,KAAD,WACE,UAAC,KAAD,YACE,SAAC,KAAD,WACE,SAACE,EAAA,EAAD,OAGF,SAAC,KAAD,CACEC,cAAe,CACbN,MAAO,GACPI,SAAU,IAEZP,iBAAkBA,EAClBU,SAtBO,SAAAC,GACfrB,GAASsB,EAAAA,EAAAA,IAAOD,GACjB,EAcO,SAQG,gBAAGA,EAAH,EAAGA,OAAQE,EAAX,EAAWA,OAAQC,EAAnB,EAAmBA,QAASC,EAA5B,EAA4BA,aAAcC,EAA1C,EAA0CA,aAA1C,OACC,UAAC,KAAD,CAAYN,SAAUM,EAAtB,WACE,UAAC,KAAD,YACE,SAAC,KAAD,CACEC,KAAK,QACLC,KAAK,QACLC,YAAY,SACZC,MAAOT,EAAOM,KACdI,SAAUN,KAEZ,SAAC,KAAD,IACCD,EAAQX,OAASU,EAAOV,QACvB,SAAC,KAAD,UAAYU,EAAOV,YAGvB,UAAC,KAAD,YACE,SAAC,KAAD,CACEc,KAAK,WACLC,KAAK,WACLC,YAAY,WACZC,MAAOT,EAAOM,KACdX,UAAU,EACVe,SAAUN,KAEZ,SAAC,KAAD,KACGF,EAAON,UAAYI,EAAOJ,UAC3BO,EAAQP,YACR,SAAC,KAAD,UAAYM,EAAON,eAGvB,UAAC,KAAD,YACE,SAAC,KAAD,CAAQe,SAAO,EAACC,YAAY,OAAOL,KAAK,SAAxC,sBAGA,SAAC,KAAD,CAAYM,GAAG,UAAUC,SAAS,OAAlC,sBAGA,UAAC,KAAD,CAAcC,KAAK,yDAAnB,0BACE,SAAC,KAAD,IADF,gBArCL,SA+CNhC,IACC,SAACiC,EAAA,EAAD,CAAOC,YApEY,WACvBtC,GAASuC,EAAAA,EAAAA,KACV,EAkE2CC,UAAU,EAAhD,UACE,SAACC,EAAA,EAAD,CAAcC,QAAStC,QAKhC,E,6BC/HYuC,EAAWC,EAAAA,GAAAA,IAAH,oMACXC,EAAAA,EAAAA,WAMAA,EAAAA,EAAAA,S,iDC8CV,EAxCkB,WAChB,IAAMC,GAAaC,EAAAA,EAAAA,eAAc,CAAEC,SAAU,MACvCC,GAAiB5C,EAAAA,EAAAA,IAAY6C,EAAAA,IAE7BC,GAAU9C,EAAAA,EAAAA,IAAY+C,EAAAA,IAE5B,OACGH,IACC,gCACCE,IAAW,SAACE,EAAA,EAAD,KACV,SAAC,KAAD,WACA,UAAC,KAAD,WACGP,IACC,UAAC,KAAD,YACE,0BACE,gCACE,mBACEQ,MAAM,sBACNC,OAAM,UAAKC,EAAL,gBAAuBC,EAAvB,OACN7B,KAAK,eAEP,mBACE0B,MAAM,qBACNC,OAAM,UAAKG,EAAL,gBAAsBC,EAAtB,OACN/B,KAAK,eAEP,SAACe,EAAD,CAAUiB,IAAKF,EAAWG,IAAI,sBAGlC,SAAC,KAAD,8BAGJ,SAAC,EAAD,WAMT,C","sources":["components/Auth/LoginForm/LoginForm.jsx","pages/AuthPage/LoginPage/LoginPage.styled.js","pages/AuthPage/LoginPage/LoginPage.jsx"],"sourcesContent":["import { useSearchParams } from 'react-router-dom';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { signin, signinWithToken } from 'redux/auth/auth-operations';\n\nimport Logo from 'components/Logo/Logo';\nimport Modal from 'components/Modal/Modal';\nimport { Button, StyledLink } from 'styles/Shared.styled';\nimport {\n  AuthContainer,\n  LogoWrapper,\n  FormWrapper,\n  StyledForm,\n  StyledLabel,\n  StyledField,\n  EmailLogo,\n  PasswordLogo,\n  AuthError,\n  ButtonWrapper,\n  GoogleLogo,\n  ButtonGoogle,\n} from '../Auth.styled';\n\nimport { getAuthError } from 'redux/auth/auth-selectors';\nimport { clearAuthError } from 'redux/auth/auth-slice';\nimport ErrorMessage from 'components/ErrorMessage/ErrorMessage';\nimport { emailRegexp } from '../../../variables/Regexp';\n\n// const emailRegexp = /^\\w+[\\w-.]*\\w@\\w+((-\\w+)|(\\w*))\\.[a-z]{2,3}$/;\n\nconst LoginForm = () => {\n  const dispatch = useDispatch();\n  const [searchParams] = useSearchParams();\n\n  const authError = useSelector(getAuthError);\n\n  const token = searchParams.get('token');\n\n  if (token) {\n    dispatch(signinWithToken({ token }));\n  }\n\n  const validationSchema = yup.object().shape({\n    email: yup\n      .string()\n      .matches(emailRegexp, 'invalid email')\n      .required('Please, enter your email'),\n    password: yup.string().required(`Please, enter your password`),\n  });\n\n  const onSubmit = values => {\n    dispatch(signin(values));\n  };\n\n  const handleModalClose = () => {\n    dispatch(clearAuthError());\n  };\n\n  return (\n    <>\n      <AuthContainer>\n        <FormWrapper>\n          <LogoWrapper>\n            <Logo />\n          </LogoWrapper>\n\n          <Formik\n            initialValues={{\n              email: '',\n              password: '',\n            }}\n            validationSchema={validationSchema}\n            onSubmit={onSubmit}\n          >\n            {({ values, errors, touched, handleChange, handleSubmit }) => (\n              <StyledForm onSubmit={handleSubmit}>\n                <StyledLabel>\n                  <StyledField\n                    name=\"email\"\n                    type=\"email\"\n                    placeholder=\"E-mail\"\n                    value={values.name}\n                    onChange={handleChange}\n                  />\n                  <EmailLogo />\n                  {touched.email && errors.email && (\n                    <AuthError>{errors.email}</AuthError>\n                  )}\n                </StyledLabel>\n                <StyledLabel>\n                  <StyledField\n                    name=\"password\"\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    value={values.name}\n                    required={true}\n                    onChange={handleChange}\n                  />\n                  <PasswordLogo />\n                  {((errors.password && values.password) ||\n                    touched.password) && (\n                    <AuthError>{errors.password}</AuthError>\n                  )}\n                </StyledLabel>\n                <ButtonWrapper>\n                  <Button primary marginBotom=\"20px\" type=\"submit\">\n                    SIGN IN\n                  </Button>\n                  <StyledLink to=\"/signup\" outlined=\"true\">\n                    SIGN UP\n                  </StyledLink>\n                  <ButtonGoogle href=\"https://goit-wallet-back.onrender.com/api/users/google\">SIGN IN WITH\n                    <GoogleLogo />\n                    OOGLE\n                  </ButtonGoogle>\n                </ButtonWrapper>\n              </StyledForm>\n            )}\n          </Formik>\n        </FormWrapper>\n      </AuthContainer>\n      {authError && (\n        <Modal toggleModal={handleModalClose} isSignIn={false}>\n          <ErrorMessage message={authError}></ErrorMessage>\n        </Modal>\n      )}\n    </>\n  );\n};\n\nexport default LoginForm;\n","import styled from \"styled-components\";\nimport { device } from \"styles/Media.variables\";\n\nexport const LoginImg = styled.img`\n\t@media ${device.tabletOnly} {\n    margin-right: 40px;\n\t\twidth: 261px;\n\t\theight: 250px;\n\t}\n\n\t@media ${device.desktop} {\n\t\tmargin-bottom: 32px;\n\t\twidth: 435px;\n\t\theight: 420px;\n\t}\n`;","import { useMediaQuery } from 'react-responsive';\nimport { useSelector } from 'react-redux';\n\nimport Loader from 'components/Loader/Loader';\nimport LoginForm from 'components/Auth/LoginForm/LoginForm';\nimport { Title } from 'styles/Shared.styled';\nimport { LoginImg } from './LoginPage.styled';\nimport { AuthContainer, StyledAuthForm, AuthHero } from '../AuthPage.styled';\n\nimport { getFirstLoading, getLoading } from 'redux/auth/auth-selectors';\n\nimport SigninTab from 'images/auth/SigninAppTab.png';\nimport SigninTab2x from 'images/auth/SigninAppTab@2x.png';\nimport SigninDesk from 'images/auth/SigninAppDesk.png';\nimport SigninDesk2x from 'images/auth/SigninAppDeskt@2x.png';\n\nconst LoginPage = () => {\n  const isntMobile = useMediaQuery({ minWidth: 768 });\n  const isFirstLoading = useSelector(getFirstLoading);\n\n  const loading = useSelector(getLoading);\n\n  return (\n    !isFirstLoading && (\n      <>\n      {loading && <Loader />}\n        <StyledAuthForm>\n        <AuthContainer>\n          {isntMobile && (\n            <AuthHero>\n              <div>\n                <picture>\n                  <source\n                    media=\"(min-width: 1280px)\"\n                    srcSet={`${SigninDesk} 1x, ${SigninDesk2x} 2x`}\n                    type=\"image/png\"\n                  />\n                  <source\n                    media=\"(min-width: 768px)\"\n                    srcSet={`${SigninTab} 1x, ${SigninTab2x} 2x`}\n                    type=\"image/png\"\n                  />\n                  <LoginImg src={SigninTab} alt=\"Finance App\" />\n                </picture>\n              </div>\n              <Title>Finance App</Title>\n            </AuthHero>\n          )}\n          <LoginForm />\n          </AuthContainer>\n        </StyledAuthForm>\n      </>\n    )\n  );\n};\n\nexport default LoginPage;\n"],"names":["dispatch","useDispatch","useSearchParams","searchParams","authError","useSelector","getAuthError","token","get","signinWithToken","validationSchema","yup","shape","email","matches","emailRegexp","required","password","Logo","initialValues","onSubmit","values","signin","errors","touched","handleChange","handleSubmit","name","type","placeholder","value","onChange","primary","marginBotom","to","outlined","href","Modal","toggleModal","clearAuthError","isSignIn","ErrorMessage","message","LoginImg","styled","device","isntMobile","useMediaQuery","minWidth","isFirstLoading","getFirstLoading","loading","getLoading","Loader","media","srcSet","SigninDesk","SigninDesk2x","SigninTab","SigninTab2x","src","alt"],"sourceRoot":""}